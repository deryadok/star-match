{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StarsDisplay","props","utils","range","count","map","starId","key","className","PlayNumber","onClick","number","status","style","backgroundColor","colors","PlayAgain","color","gameStatus","Game","React","useState","random","stars","setStars","availableNums","setAvaliableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","length","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","avaliable","used","wrong","candidate","StarMatch","gameId","setGameId","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.942aba3b.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <StarMatch></StarMatch>      \n  );\n}\n\nconst StarsDisplay = (props) => {\n  return(\n    <>\n      {utils.range(1, props.count).map(starId => \n        <div key= {starId} className=\"star\"></div>\n      )}\n    </>\n  );\n}\n\nconst PlayNumber = (props) => {\n  return(\n    <button \n      className=\"number\" \n      onClick={() => props.onClick(props.number, props.status)} \n      style={{backgroundColor: colors[props.status]}}>\n      {props.number}\n      </button>\n  );\n}\n\nconst PlayAgain = (props) => {\n  return(\n    <div className=\"game-done\">\n    <div className=\"message\" style = {{color: props.gameStatus === 'lost' ? 'red' : 'green'}}>{props.gameStatus === 'lost' ? 'Game Over' : 'You Won'}</div>\n      <button onClick={props.onClick}>Tekrar Oyna!</button>\n    </div>\n  );\n}\n\nconst useGameState = () => {\n  \n  const [stars, setStars] = React.useState(utils.random(1,9));\n  const [availableNums, setAvaliableNums] = React.useState(utils.range(1,9));\n  const [candidateNums, setCandidateNums] = React.useState([]);\n  const [secondsLeft, setSecondsLeft] = React.useState(10);\n\n  useEffect(() =>{\n    if(secondsLeft > 0 && availableNums.length > 0){\n      const timerId = setTimeout(() => {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n      return () => clearTimeout(timerId);\n    }\n  });\n\n  const setGameState = (newCandidateNums) => {\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvaliableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  }\n\n  return {stars, availableNums, candidateNums, secondsLeft, setGameState}\n}\n\n\nconst Game = (props) =>{\n  \n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState,\n  } = useGameState()\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active'\n  \n  const numberStatus = (number) => {\n    if(!availableNums.includes(number)){\n      return 'used';\n    }\n    if(candidateNums.includes(number)){\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    \n    if(gameStatus !== 'active' || currentStatus === 'used'){\n      return;\n    }\n    \n    const newCandidateNums = currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n    \n    setGameState(newCandidateNums);\n  };\n\n  return(\n    <div className=\"game\">\n      <div className=\"help\">\n        Yıldızların toplamını bir ya da birden fazla rakamı seçerek bul!\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== 'active' ? (<PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}></PlayAgain>) : (<StarsDisplay count={stars}></StarsDisplay>)}\n        </div>\n        <div className=\"right\">\n          {utils.range(1, 9).map(number =>\n            <PlayNumber key={number} number={number} status={numberStatus(number)} onClick={onNumberClick}/>\n          )}\n        </div>\n      </div>\n      <div className=\"timer\">\n          Kalan süre: {secondsLeft}\n      </div>\n    </div>\n  );\n}\n\nconst colors = {\n  avaliable : 'lightgray',\n  used : 'lightgreen',\n  wrong : 'lightcoral',\n  candidate : 'deepskyblue'\n};\n\nconst StarMatch = () => {\n  const [gameId, setGameId] = React.useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)}/>\n}\n\nconst utils = {\n  //Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  //create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n\n  //pick a random number between min and max (edges included)\n  random: (min, max) => {var rnd = Math.floor(Math.random() * (max - min + 1)) + min; return rnd;} ,\n\n  //given an array of numbers and a max\n  //pick a random sum (<max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        let candidateSet = sets[j].concat(arr[i]);\n        let candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}